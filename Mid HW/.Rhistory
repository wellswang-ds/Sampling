theme(legend.position = "none") +
scale_y_sqrt() +
facet_wrap(~ plan_list_price_level)
p3 <- TestDF_E2 %>%
ggplot(aes(plan_list_price_level, fill = plan_list_price_level)) +
geom_bar() +
theme(legend.position = "none") +
scale_y_sqrt() +
facet_wrap(~ plan_list_price_level)
layout <- matrix(c(1,2,3),1,3,byrow=TRUE)
multiplot(p1, p2, p3, layout=layout)
load("~/Desktop/Thesis/FE/Finalerror.RData")
load("~/Desktop/Thesis/FE/Finalerror.RData")
load("~/Desktop/Thesis/FE/Finalerror.RData")
Load library and helper functions ---------------------------------------
# general visualisation
library('ggplot2') # visualisation
library('scales') # visualisation
library('grid') # visualisation
library('gridExtra') # visualisation
library('RColorBrewer') # visualisation
library('corrplot') # visualisation
# general data manipulation
library('dplyr') # data manipulation
library('readr') # input/output
library('data.table') # data manipulation
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('stringr') # string manipulation
library('forcats') # factor manipulation
# Dates
library('lubridate') # date and time
# Extra vis
library('ggforce') # visualisation
library('ggridges') # visualisation
# multiplot function ------------------------------------------------------
# Define multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
# Define multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
p1 <- TestDF %>%
ggplot(aes(reg_via, fill = reg_via)) +
geom_bar() +
theme(legend.position = "none") +
scale_y_sqrt() +
ggtitle("測試資料")
p2 <- TestDF_E1 %>%
ggplot(aes(reg_via, fill = reg_via)) +
geom_bar() +
theme(legend.position = "none") +
scale_y_sqrt() +
ggtitle("群ㄧ")
p3 <- TestDF_E2 %>%
ggplot(aes(reg_via, fill = reg_via)) +
geom_bar() +
theme(legend.position = "none") +
scale_y_sqrt() +
ggtitle("群二")
layout <- matrix(c(1,2,3),1,3,byrow=TRUE)
multiplot(p1, p2, p3, layout=layout)
p1 <- TestDF %>%
ggplot(aes(reg_via, fill = reg_via)) +
geom_bar() +
theme(legend.position = "none") +
scale_y_sqrt() +
ggtitle("Test data")
p2 <- TestDF_E1 %>%
ggplot(aes(reg_via, fill = reg_via)) +
geom_bar() +
theme(legend.position = "none") +
scale_y_sqrt() +
ggtitle("Group 1")
p3 <- TestDF_E2 %>%
ggplot(aes(reg_via, fill = reg_via)) +
geom_bar() +
theme(legend.position = "none") +
scale_y_sqrt() +
ggtitle("Group 2")
layout <- matrix(c(1,2,3),1,3,byrow=TRUE)
multiplot(p1, p2, p3, layout=layout)
p1 <- TestDF %>%
ggplot(aes(auto_renew, fill = auto_renew)) +
geom_bar() +
theme(legend.position = 'none') +
ggtitle("Test data")
p2 <- TestDF_E1 %>%
ggplot(aes(auto_renew, fill = auto_renew)) +
geom_bar() +
theme(legend.position = 'none') +
ggtitle("Group 1")
p3 <- TestDF_E2 %>%
ggplot(aes(auto_renew, fill = auto_renew)) +
geom_bar() +
theme(legend.position = 'none') +
ggtitle("Group 2")
layout <- matrix(c(1,2,3),1,3,byrow=TRUE)
multiplot(p1, p2, p3, layout=layout)
p1 <- TestDF %>%
ggplot(aes(auto_renew, fill = auto_renew)) +
geom_bar() +
theme(legend.position = 'none') +
ggtitle("Test data")
p2 <- TestDF_E1 %>%
ggplot(aes(auto_renew, fill = auto_renew)) +
geom_bar() +
theme(legend.position = 'none') +
ggtitle("Group 1")
p3 <- TestDF_E2 %>%
ggplot(aes(auto_renew, fill = auto_renew)) +
geom_bar() +
theme(legend.position = 'none') +
ggtitle("Group 2")
layout <- matrix(c(1,2,3),1,3,byrow=TRUE)
multiplot(p1, p2, p3, layout=layout)
p1 <- TestDF %>%
ggplot(aes(reg_via, fill = reg_via)) +
geom_bar() +
theme(legend.position = "none") +
scale_y_sqrt() +
coord_cartesian(ylim = c(0, 8e6)) +
ggtitle("Test data")
p2 <- TestDF_E1 %>%
ggplot(aes(reg_via, fill = reg_via)) +
geom_bar() +
theme(legend.position = "none") +
scale_y_sqrt() +
coord_cartesian(ylim = c(0, 8e6)) +
ggtitle("Group 1")
p3 <- TestDF_E2 %>%
ggplot(aes(reg_via, fill = reg_via)) +
geom_bar() +
theme(legend.position = "none") +
scale_y_sqrt() +
coord_cartesian(ylim = c(0, 8e6)) +
ggtitle("Group 2")
layout <- matrix(c(1,2,3),1,3,byrow=TRUE)
multiplot(p1, p2, p3, layout=layout)
p1 <- TestDF %>%
ggplot(aes(auto_renew, fill = auto_renew)) +
geom_bar() +
theme(legend.position = 'none') +
coord_cartesian(ylim = c(0,1.3e7)) +
ggtitle("Test data")
p2 <- TestDF_E1 %>%
ggplot(aes(auto_renew, fill = auto_renew)) +
geom_bar() +
theme(legend.position = 'none') +
coord_cartesian(ylim = c(0,1.3e7)) +
ggtitle("Group 1")
p3 <- TestDF_E2 %>%
ggplot(aes(auto_renew, fill = auto_renew)) +
geom_bar() +
theme(legend.position = 'none') +
coord_cartesian(ylim = c(0,1.3e7)) +
ggtitle("Group 2")
layout <- matrix(c(1,2,3),1,3,byrow=TRUE)
multiplot(p1, p2, p3, layout=layout)
p1 <- TestDF %>%
ggplot(aes(is_cancel, fill = is_cancel)) +
geom_bar() +
theme(legend.position = 'none') +
ggtitle("Test data")
p2 <- TestDF_E1 %>%
ggplot(aes(is_cancel, fill = is_cancel)) +
geom_bar() +
theme(legend.position = 'none') +
ggtitle("Group 1")
p3 <- TestDF_E2 %>%
ggplot(aes(is_cancel, fill = is_cancel)) +
geom_bar() +
theme(legend.position = 'none') +
ggtitle("Group 2")
layout <- matrix(c(1,2,3),1,3,byrow=TRUE)
multiplot(p1, p2, p3, layout=layout)
p1 <- TestDF %>%
ggplot(aes(is_cancel, fill = is_cancel)) +
geom_bar() +
theme(legend.position = 'none') +
coord_cartesian(ylim = c(0,1.35e7)) +
ggtitle("Test data")
p2 <- TestDF_E1 %>%
ggplot(aes(is_cancel, fill = is_cancel)) +
geom_bar() +
theme(legend.position = 'none') +
coord_cartesian(ylim = c(0,1.35e7)) +
ggtitle("Group 1")
p3 <- TestDF_E2 %>%
ggplot(aes(is_cancel, fill = is_cancel)) +
geom_bar() +
theme(legend.position = 'none') +
coord_cartesian(ylim = c(0,1.35e7)) +
ggtitle("Group 2")
layout <- matrix(c(1,2,3),1,3,byrow=TRUE)
multiplot(p1, p2, p3, layout=layout)
p1 <- TestDF %>%
ggplot(aes(plan_list_price_level, fill = plan_list_price_level)) +
geom_bar() +
theme(legend.position = "none") +
scale_y_sqrt() +
ggtitle("Test data")
p2 <- TestDF_E1 %>%
ggplot(aes(plan_list_price_level, fill = plan_list_price_level)) +
geom_bar() +
theme(legend.position = "none") +
scale_y_sqrt() +
ggtitle("Group 1")
p3 <- TestDF_E2 %>%
ggplot(aes(plan_list_price_level, fill = plan_list_price_level)) +
geom_bar() +
theme(legend.position = "none") +
scale_y_sqrt() +
ggtitle("Group 2")
layout <- matrix(c(1,2,3),1,3,byrow=TRUE)
multiplot(p1, p2, p3, layout=layout)
p1 <- TestDF %>%
ggplot(aes(plan_list_price_level, fill = plan_list_price_level)) +
geom_bar() +
theme(legend.position = "none") +
scale_y_sqrt() +
coord_cartesian(ylim = c(0,1e7)) +
ggtitle("Test data")
p2 <- TestDF_E1 %>%
ggplot(aes(plan_list_price_level, fill = plan_list_price_level)) +
geom_bar() +
theme(legend.position = "none") +
scale_y_sqrt() +
coord_cartesian(ylim = c(0,1e7)) +
ggtitle("Group 1")
p3 <- TestDF_E2 %>%
ggplot(aes(plan_list_price_level, fill = plan_list_price_level)) +
geom_bar() +
theme(legend.position = "none") +
scale_y_sqrt() +
coord_cartesian(ylim = c(0,1e7)) +
ggtitle("Group 2")
layout <- matrix(c(1,2,3),1,3,byrow=TRUE)
multiplot(p1, p2, p3, layout=layout)
TestDF <- TestDF %>%
mutate(price_difference = sale)%>%
select(-sale)
TestDF_E1 <- TestDF_E1 %>%
mutate(price_difference = sale)%>%
select(-sale)
TestDF_E2 <- TestDF_E2 %>%
mutate(price_difference = sale)%>%
select(-sale)
p1 <- TestDF %>%
ggplot(aes(price_difference, fill = price_difference)) +
geom_bar() +
theme(legend.position = 'none') +
ggtitle("Test data")
p2 <- TestDF_E1 %>%
ggplot(aes(price_difference, fill = price_difference)) +
geom_bar() +
theme(legend.position = 'none') +
ggtitle("Group 1")
p3 <- TestDF_E2 %>%
ggplot(aes(price_difference, fill = price_difference)) +
geom_bar() +
theme(legend.position = 'none') +
ggtitle("Group 2")
layout <- matrix(c(1,2,3),1,3,byrow=TRUE)
multiplot(p1, p2, p3, layout=layout)
p1 <- TestDF %>%
ggplot(aes(price_difference, fill = price_difference)) +
geom_bar() +
theme(legend.position = 'none') +
coord_cartesian(ylim = c(0,1.35e7)) +
ggtitle("Test data")
p2 <- TestDF_E1 %>%
ggplot(aes(price_difference, fill = price_difference)) +
geom_bar() +
theme(legend.position = 'none') +
coord_cartesian(ylim = c(0,1.35e7)) +
ggtitle("Group 1")
p3 <- TestDF_E2 %>%
ggplot(aes(price_difference, fill = price_difference)) +
geom_bar() +
theme(legend.position = 'none') +
coord_cartesian(ylim = c(0,1.35e7)) +
ggtitle("Group 2")
layout <- matrix(c(1,2,3),1,3,byrow=TRUE)
multiplot(p1, p2, p3, layout=layout)
p1 <- TestDF %>%
filter(days > 0 & days < 100) %>%
ggplot(aes(days)) +
geom_density(fill = "red", bw = 1) +
scale_y_sqrt() +
ggtitle("Test data")
p2 <- TestDF_E1 %>%
filter(days > 0 & days < 100) %>%
ggplot(aes(days)) +
geom_density(fill = "skyblue", bw = 1) +
scale_y_sqrt() +
ggtitle("Group 1")
p3 <- TestDF_E2 %>%
filter(days > 0) %>%
ggplot(aes(days)) +
geom_density(fill = "green", bw = 1) +
scale_y_sqrt() +
ggtitle("Group 2")
layout <- matrix(c(1,2,3),3,1,byrow=TRUE)
multiplot(p1, p2, p3, layout=layout)
p1 <- TestDF %>%
filter(days > 0 & days < 100) %>%
ggplot(aes(days)) +
geom_density(fill = "red", bw = 1) +
ggtitle("Test data")
p2 <- TestDF_E1 %>%
filter(days > 0 & days < 100) %>%
ggplot(aes(days)) +
geom_density(fill = "skyblue", bw = 1) +
ggtitle("Group 1")
p3 <- TestDF_E2 %>%
filter(days > 0) %>%
ggplot(aes(days)) +
geom_density(fill = "green", bw = 1) +
ggtitle("Group 2")
layout <- matrix(c(1,2,3),3,1,byrow=TRUE)
multiplot(p1, p2, p3, layout=layout)
p1 <- TestDF %>%
filter(days > 0 & days < 100) %>%
ggplot(aes(days)) +
geom_density(fill = "red", bw = 1) +
coord_cartesian(xlim = c(0,2500)) +
ggtitle("Test data")
p2 <- TestDF_E1 %>%
filter(days > 0 & days < 100) %>%
ggplot(aes(days)) +
geom_density(fill = "skyblue", bw = 1) +
coord_cartesian(xlim = c(0,2500)) +
ggtitle("Group 1")
p3 <- TestDF_E2 %>%
filter(days > 0) %>%
ggplot(aes(days)) +
geom_density(fill = "green", bw = 1) +
coord_cartesian(xlim = c(0,2500)) +
ggtitle("Group 2")
layout <- matrix(c(1,2,3),3,1,byrow=TRUE)
multiplot(p1, p2, p3, layout=layout)
load("~/Desktop/Thesis/data/KKboxdata_Final.RData")
# general visualisation
library('ggplot2') # visualisation
library('scales') # visualisation
library('grid') # visualisation
library('gridExtra') # visualisation
library('RColorBrewer') # visualisation
library('corrplot') # visualisation
# general data manipulation
library('dplyr') # data manipulation
library('readr') # input/output
library('data.table') # data manipulation
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('stringr') # string manipulation
library('forcats') # factor manipulation
# Dates
library('lubridate') # date and time
# Extra vis
library('ggforce') # visualisation
library('ggridges') # visualisation
glimpse(train)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
p1 <- train %>%
ggplot(aes(is_churn, fill = is_churn)) +
geom_bar() +
theme(legend.position = "none")
p2 <- members %>%
ggplot(aes(gender, fill = gender)) +
geom_bar() +
theme(legend.position = "none")
p3 <- members %>%
ggplot(aes(reg_via, fill = reg_via)) +
geom_bar() +
theme(legend.position = "none") +
scale_y_sqrt()
p4 <- members %>%
ggplot(aes(city, fill = city)) +
geom_bar() +
theme(legend.position = "none") +
scale_y_sqrt()
p5 <- members %>%
filter(bd > 0 & bd < 100) %>%
ggplot(aes(bd)) +
geom_density(fill = "red", bw = 1)
layout <- matrix(c(1,1,2,2,3,3,4,4,4,5,5,5),2,6,byrow=TRUE)
multiplot(p1, p2, p3, p4, p5, layout=layout)
install.packages("olsrr")
library(olsrr)
setwd("~/Documents/FJU大四/抽樣調查/Mid HW")
